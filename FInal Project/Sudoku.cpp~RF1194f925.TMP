#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#include <string.h>
#include <iostream>
#include <ctime>
#include <iomanip>

void equating_matricies(int arr_i[3][3], int arr[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			arr_i[i][j] = arr[i][j];
}
int random(int sudoku[9][9])
{
	int i, j,m,n;
	srand(time(0));
	/*grb t3ml loops tmsk awl element w tqarno bel ba2y w t5ly el shbh b3d be 0*/
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			sudoku[i][j]=(rand() % 9 );
			if (sudoku[i][j] == sudoku[i - 1][j])
				sudoku[i][j] = 0;
			else if(sudoku[i][j] == sudoku[i][j-1])
				sudoku[i][j]=0;

			
		}
	}

	for (i = 0; i < 9; i++)
		for (j = 0; j < 9; j++)
			for (n = 0; n < 9 && j + 1 < 9; n++)
			{
				if (sudoku[i][j] == sudoku[i][n])
					sudoku[i][n] == 0;
			}
	for (i = 0; i < 9; i++)
		for (j = 0; j < 9; j++)
			for (n = 0; n < 9 && j + 1 < 9; n++)
			{
				if (sudoku[i][j] == sudoku[n][j])
					sudoku[n][j] == 0;
			}

	

	return 0;
}

void step_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3], int* check);

void init(int puzzle[3][3])
{
	int i, r, c,N;
	printf("\nPlease enter the amount of elements you would like to enter in the grid:\n");
	scanf("%d", &N);
	for (i = 1; i <= N; i++)
	{
		printf("Enter the row and column of the element you would like to enter(numbers between 1 and 3):\n");
		scanf("%d%d", &r, &c);
		printf("Enter the element (%d,%d)\n", r, c);
		scanf("%d", &puzzle[r-1][c-1]);
		
	}
	
}

void print_puzzle(int printable1[3][3],int printable2[3][3],int printable3[3][3])
{
	int r, c,counter=0;
	for (r = 0; r < 3; r++)
	{
		printf("\t");
		if (counter==0)
		{
			printf("-------------------------");
			printf("\n\t");
		}
		printf(": ");
		
		for (c = 0; c < 3; c++)
			if (printable1[r][c] > 0)
				printf("%d ", printable1[r][c]);
			else
				printf(". ");
		
		printf(": ");
		
		for (c = 0; c < 3; c++)
			if (printable2[r][c] > 0)
				printf("%d ", printable2[r][c]);
			else
				printf(". ");
		
		printf(": ");
		
		for (c = 0; c < 3; c++)
			if (printable3[r][c] > 0)
				printf("%d ", printable3[r][c]);
			else
				printf(". ");
		
		printf(":");
		printf("\n");
		counter++;		
	}

}

void play(int arr1[3][3], int arr2[3][3],int arr3[3][3],int arr4[3][3],int arr5[3][3],int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3])
{
	int choice,turns=1;
	do {
		printf("Please choose which 3x3 box you'd like to enter a number in(1-9):");
		scanf("%d", &choice);
		int check = 0;
		switch (choice)
		{
		case 1:
			init(arr1);
			step_checker(arr1, arr2, arr3, arr4, arr7,&check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1,arr2,arr3); print_puzzle(arr4,arr5,arr6); print_puzzle(arr7,arr8,arr9);
			printf("\t-------------------------");
			break;
		case 2:
			init(arr2);
			step_checker(arr2, arr1, arr3, arr5, arr8,&check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 3:
			init(arr3);
			step_checker(arr3, arr1, arr2, arr6, arr9, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 4:
			init(arr4);
			step_checker(arr4, arr5, arr6, arr1, arr7, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 5:
			init(arr5);
			step_checker(arr5, arr4, arr6, arr2, arr8, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 6:
			init(arr6);
			step_checker(arr6, arr4, arr5, arr3, arr9, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 7:
			init(arr7);
			step_checker(arr7, arr8, arr9, arr1, arr4, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 8:
			init(arr8);
			step_checker(arr8, arr7, arr9, arr2, arr5, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		case 9:
			init(arr9);
			step_checker(arr9, arr7, arr8, arr3, arr6, &check);
			printf("\nThe puzzle so far... :\n");
			print_puzzle(arr1, arr2, arr3); print_puzzle(arr4, arr5, arr6); print_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			break;
		default:
			printf("\nIncorrect input,please try again.");
			break;
		}
		printf("\nDo you want to enter another number? enter 1 to continue or 0 to stop playing.\n");
		scanf("%d", &turns);
	} while (turns != 0);
}

void final_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3],int *check)
{
	int i, j, k, l, m;
	*check = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0;j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; m < 3; m++)
				{
					if (arr[i][j] == arr[k][m])
					{
						if (i != k || j != m)
						{
							(*check)++;
							break;
						}
					}
					if (arr[i][j] == arr1[i][m])
					{
						
						(*check)++;
						break;
					}
					if (arr[i][j] == arr2[i][m])
					{
						
						(*check)++;
						break;
					}
					if (arr[j][i] == arc1[m][i])
					{
						(*check)++;
						break;
					}
					if (arr[j][i] == arc2[m][i])
					{
						
						(*check)++;
						break;
					}
				}
			}
		}
	}
	
}

void step_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3], int* check)
{
	int i, j, k, l, m;
	*check = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; (m < 3) && (arr[i][j]!=0) ;m++)
				{
					if (i != k || j != m)
					{
						if (arr[i][j]==arr[k][m])
						{
							
							(*check)++;
							printf("\n%d is an invalid input in (%d,%d)\n", arr[i][j], i, j);
							break;
						}
					}
					if (arr[i][j] == arr1[i][m])
					{
						(*check)++;
						printf("\n%d is an invalid input in (%d,%d)\n", arr[i][j], i, j);
						break;
					}
					if (arr[i][j] == arr2[i][m])
					{
						
						(*check)++;
						printf("\n%d is an invalid input in (%d,%d)\n", arr[i][j], i, j);
						break;
					}
					if (arr[j][i] == arc1[m][i]&& arr[j][i]!=0)
					{
						
						(*check)++;
						printf("\n%d is an invalid input in (%d,%d)\n", arr[j][i],j,i);
						break;
					}
					if (arr[j][i] == arc2[m][i] && arr[j][i] != 0)
					{
						
						printf("\n%d is an invalid input in (%d,%d)\n", arr[j][i],j,i);
						(*check)++;
						break;
					}
				}
				if (*check > 0)
					break;
			}
			if (*check > 0)
				break;
		}
		if (*check > 0)
			break;
	}

}

int number_unassigned(int sudoku[9][9],int* row, int* col)
{
	int num_unassign = 0;
	int i, j;
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			if (sudoku[i][j] == 0)
			{
				*row = i;
				*col = j;
				num_unassign = 1;
				return num_unassign;
			}
		}
	}
	return num_unassign;
}

int is_safe(int sudoku[9][9],int n, int r, int c)
{
	int i, j;
	for (i = 0; i < 9; i++)
	{
		if (sudoku[r][i] == n)
			return 0;
	}
	for (i = 0; i < 9; i++)
	{
		if (sudoku[i][c] == n)
			return 0;
	}
	int row_start = (r / 3) * 3;
	int col_start = (c / 3) * 3;
	for (i = row_start; i < row_start + 3; i++)
	{
		for (j = col_start; j < col_start + 3; j++)
		{
			if (sudoku[i][j] == n)
				return 0;
		}
	}
	return 1;
}

int solve_sudoku(int sudoku[9][9])
{
	int row;
	int col;
	if (number_unassigned(sudoku,&row, &col) == 0)
		return 1;
	int n, i;
	for (i = 1; i <= 9; i++)
	{
		if (is_safe(sudoku,i, row, col))
		{
			sudoku[row][col] = i;
			if (solve_sudoku(sudoku))
				return 1;
			sudoku[row][col] = 0;
		}
	}
	return 0;
}




void main()
{
	int choice;
	int box1[3][3] = { 0,0,0,0,0,0,0,0,0 }; int box2[3][3] = { 0,0,0,0,0,0,0,0,0 };
	int box3[3][3] = { 0,0,0,0,0,0,0,0,0 }; int box4[3][3] = { 0,0,0,0,0,0,0,0,0 };
	int box5[3][3] = { 0,0,0,0,0,0,0,0,0 }; int box6[3][3] = { 0,0,0,0,0,0,0,0,0 };
	int box7[3][3] = { 0,0,0,0,0,0,0,0,0 }; int box8[3][3] = { 0,0,0,0,0,0,0,0,0 }; int box9[3][3] = { 0,0,0,0,0,0,0,0,0 };
	int box1_i[3][3], box2_i[3][3], box3_i[3][3], box4_i[3][3], box5_i[3][3], box6_i[3][3], box7_i[3][3], box8_i[3][3], box9_i[3][3];
	int c1=0, c2=0, c3=0, c4=0, c5=0, c6=0, c7=0, c8=0, c9=0;
	int sudoku[9][9];
	int i, j,solver;
	printf("Welcome to the sudoku puzzle game");
	printf("\nThis program allows you to make a sudoku puzzle AND have someone else solve it!");
	printf("\nIt can also automatically solve your puzzle for you if it gets too hard!");
	do 
	{
		printf("\nPlease choose one of the following options:");
		printf("\n1-I want to make a puzzle manually");
		printf("\n2-Make a puzzle for me");
		printf("\n3-Start playing");
		printf("\n4-Reset the puzzle to its intial state");
		printf("\n5-Solve the puzzle for me");
		printf("\n6-Check my final solution");
		printf("\n7-Quit the game\n");
		scanf("%d", &choice);
		switch (choice)
		{
		
		case 1:
		{
			printf("\nThis is the intial stage of the puzzle\nEnter a number between 1 and 9 in each box,or zero if you wish to leave it empty.\n");
			printf("Please don't enter the same number twice in the same row,column or box\n");
			init(box1);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------"); 
			init(box2);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------"); 
			init(box3); printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			init(box4); printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			init(box5);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			init(box6);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------"); 
			init(box7);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			init(box8);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			init(box9);
			equating_matricies(box1_i, box1);  equating_matricies(box2_i, box2); equating_matricies(box3_i, box3);
			equating_matricies(box4_i, box4); equating_matricies(box5_i, box5); equating_matricies(box6_i, box6);
			equating_matricies(box7_i, box7); equating_matricies(box8_i, box8); equating_matricies(box9_i, box9);
			printf("\nThe entered puzzle is:\n");
			print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
			printf("\t-------------------------");
			break;
		}
		case 2:
		{
		
		random(sudoku);
			
		 

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box1[i][j] = sudoku[i][j];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box2[i][j] = sudoku[i][j + 3];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box3[i][j] = sudoku[i][j + 6];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box4[i][j] = sudoku[i + 3][j];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box5[i][j] = sudoku[i + 3][j + 3];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box6[i][j] = sudoku[i + 3][j + 6];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box7[i][j] = sudoku[i + 6][j];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box8[i][j] = sudoku[i + 6][j + 3];

		for (i = 0; i < 3; i++)
			for (j = 0; j < 3; j++)
				box9[i][j] = sudoku[i + 6][j + 6];


		printf("\nThe random puzzle is... :\n");
		print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
		printf("\t-------------------------");


		break;
		}
		case 3:
		{printf("\nYou can now start playing the game,good luck!");
		printf("\nPlease keep in mind that this sudoku puzzle is divided into 9 matricies of order 3x3.");
		play(box1, box2, box3, box4, box5, box6, box7, box8, box9);
		printf("\nThe puzzle so far... :\n");
		print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
		printf("\t-------------------------");
		break;
		}
		
		case 4:
		{printf("\nResetting puzzle...");
		printf("\nThe entered puzzle is:\n");
		print_puzzle(box1_i, box2_i, box3_i); print_puzzle(box4_i, box5_i, box6_i); print_puzzle(box7_i, box8_i, box9_i);
		printf("\t-------------------------");
		break; 
		}

		case 5:
		{

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i][j] = box1_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i][j + 3] = box2_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i][j + 6] = box3_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 3][j] = box4_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 3][j + 3] = box5_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 3][j + 6] = box6_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 6][j] = box7_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 6][j + 3] = box8_i[i][j];

			for (i = 0; i < 3; i++)
				for (j = 0; j < 3; j++)
					sudoku[i + 6][j + 6] = box9_i[i][j];

			solver = solve_sudoku(sudoku);
			if (solve_sudoku(sudoku))
			{
				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box1[i][j] = sudoku[i][j];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box2[i][j] = sudoku[i][j + 3];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box3[i][j] = sudoku[i][j + 6];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box4[i][j] = sudoku[i + 3][j];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box5[i][j] = sudoku[i + 3][j + 3];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box6[i][j] = sudoku[i + 3][j + 6];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box7[i][j] = sudoku[i + 6][j];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box8[i][j] = sudoku[i + 6][j + 3];

				for (i = 0; i < 3; i++)
					for (j = 0; j < 3; j++)
						box9[i][j] = sudoku[i + 6][j + 6];

				
			}
			final_checker(box1, box2, box3, box4, box7, &c1);
			if (c1 == 0)
			{
				printf("\nThe final solution is... :\n");
				print_puzzle(box1, box2, box3); print_puzzle(box4, box5, box6); print_puzzle(box7, box8, box9);
				printf("\t-------------------------");
			}
			else
				printf("\nThis puzzle is incorrect and has no viable solution,please try again.\n");
			break;
		}
		case 6:
		{	
		c1 = 0;
		printf("\nChecking your final solution...");
		final_checker(box1, box2, box3, box4, box7, &c1); final_checker(box2, box1, box3, box5, box8, &c2);
		final_checker(box3, box1, box2, box6, box9, &c3); final_checker(box4, box5, box6, box1, box7, &c4);
		final_checker(box5, box4, box6, box2, box8, &c5); final_checker(box6, box4, box5, box3, box9, &c6);
		final_checker(box7, box8, box9, box1, box4, &c7); final_checker(box8, box7, box9, box2, box5, &c8);
		final_checker(box9, box7, box8, box3, box6, &c9);
		if (c1 != 0 || c2 != 0 || c3 != 0 || c4 != 0 || c5 != 0 || c6 != 0 || c7 != 0 || c8 != 0 || c9 != 0)
			printf("\nThe solution is incorrect,please try again\n");
		if (c1 == 0 && c2 == 0 && c3 == 0 && c4 == 0 && c5 == 0 && c6 == 0 && c7 == 0 && c8 == 0 && c9 == 0)
			printf("\nCongratulations! Your solution is correct!\n");
		break;
		}

		default:
			printf("\nThanks for playing!\n");
			break;
		

		

		}
	} while (choice != 7);
}



