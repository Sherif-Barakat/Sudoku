#define _CRT_SECURE_NO_WARNINGS
#include <conio.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int solve_sudoku(int sudoku[9][9]);
void print_puzzle(int printable1[3][3], int printable2[3][3], int printable3[3][3], int intial1[3][3], int intial2[3][3], int intial3[3][3]);
void rand_modif(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3]);
void step_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3], int* check);
void print_puzzle(int printable1[3][3], int printable2[3][3], int printable3[3][3], int intial1[3][3], int intial2[3][3], int intial3[3][3]);

void rand_modif_box(int arr[3][3])
{
	int i, j, k=0;

	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			if (arr[i][j] > 0)
				k++;
			if (k > 3)
				arr[i][j] = 0;
		}

	}

}

void print_init_puzzle(int printable1[3][3], int printable2[3][3], int printable3[3][3])
{
	int r, c, counter = 0;
	for (r = 0; r < 3; r++)
	{
		
		if (counter == 0)
		{
			printf("\t");
			printf("-------------------------");
			printf("\n");
		}
		printf("       %d: ", r + 1);
		

		for (c = 0; c < 3; c++)
			if (printable1[r][c] > 0)
				printf("%d ", printable1[r][c]);	
			else
				printf(". ");
		printf(": ");

		for (c = 0; c < 3; c++)
			if (printable2[r][c] > 0)
			{
				printf("%d ", printable2[r][c]);
			}
			else
				printf(". ");

		printf(": ");

		for (c = 0; c < 3; c++)
			if (printable3[r][c] > 0)
			{
				printf("%d ", printable3[r][c]);
			}
			else
				printf(". ");

		printf(":");
		printf("\n");
		
		counter++;
	}

}

void play_input(int puzzle[3][3],int puzzle_i[3][3],int arr1[3][3], int arr2[3][3], int arr3[3][3], int arr4[3][3], int arr5[3][3], int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3],
	int arr1_i[3][3], int arr2_i[3][3], int arr3_i[3][3], int arr4_i[3][3], int arr5_i[3][3], int arr6_i[3][3], int arr7_i[3][3], int arr8_i[3][3], int arr9_i[3][3])
{
	int i, r, c, N;
	printf("\033[1;36m");
	scanf("%d", &N);
	printf("\033[0m");
	for (i = 1; i <= N; i++)
	{
		printf("\n\033[1;35mEnter the row and column of the element you would like to enter(numbers between 1 and 3):\n\033[0m");
		printf("\033[1;36m");
		scanf("%d%d", &r, &c);
		printf("\033[0m");
		if (r <= 3 && c <= 3)
		{
			if (puzzle_i[r - 1][c - 1] == 0)
			{
				printf("\033[1;35mEnter the element (%d,%d)\n\033[0m", r, c);
				printf("\033[1;36m");
				scanf("%d", &puzzle[r - 1][c - 1]);
				printf("\033[0m");
				system("cls");

				printf("\nThe puzzle so far... :\n");
				printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
				print_puzzle(arr1, arr2, arr3, arr1_i, arr2_i, arr3_i); print_puzzle(arr4, arr5, arr6, arr4_i, arr5_i, arr6_i); print_puzzle(arr7, arr8, arr9, arr7_i, arr8_i, arr9_i);
				printf("\t\033[1;36m-------------------------\033[0m");
			}
			else
			{
				system("cls");
				printf("\033[1;31m\nThis element (%d,%d) is already in the puzzle,try another slot.\033[0m",r,c);
				printf("\nThe puzzle so far... :\n");
				printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
				print_puzzle(arr1, arr2, arr3, arr1_i, arr2_i, arr3_i); print_puzzle(arr4, arr5, arr6, arr4_i, arr5_i, arr6_i); print_puzzle(arr7, arr8, arr9, arr7_i, arr8_i, arr9_i);
				printf("\t\033[1;36m-------------------------\033[0m");
			}
			
		}
		else
		{
			system("cls");
			printf("\n\033[1;31mIncorrect input,please enter numbers between 1 and 3.\033[0m\n");
			printf("\nThe puzzle so far... :\n");
			printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0");
			print_puzzle(arr1, arr2, arr3, arr1_i, arr2_i, arr3_i); print_puzzle(arr4, arr5, arr6, arr4_i, arr5_i, arr6_i); print_puzzle(arr7, arr8, arr9, arr7_i, arr8_i, arr9_i);
			printf("\t\033[1;36m-------------------------\033[0m");
		}
	}

}

void equating_zero(int arr[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			arr[i][j]=0;
}

void sudoku_reverse(int sudoku[9][9],int box1[3][3], int box2[3][3], int box3[3][3], int box4[3][3], int box5[3][3], int box6[3][3], int box7[3][3], int box8[3][3], int box9[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
		{
			box1[i][j] = sudoku[i][j];
			box2[i][j] = sudoku[i][j + 3];
			box3[i][j] = sudoku[i][j + 6];
			box4[i][j] = sudoku[i + 3][j];
			box5[i][j] = sudoku[i + 3][j + 3];
			box6[i][j] = sudoku[i + 3][j + 6];
			box7[i][j] = sudoku[i + 6][j];
			box8[i][j] = sudoku[i + 6][j + 3];
			box9[i][j] = sudoku[i + 6][j + 6];
		}
}

void sudoku_init(int sudoku[9][9], int arr1[3][3], int arr2[3][3], int arr3[3][3], int arr4[3][3], int arr5[3][3], int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
		{
			sudoku[i][j] = arr1[i][j];
			sudoku[i][j + 3] = arr2[i][j];
			sudoku[i][j + 6] = arr3[i][j];
			sudoku[i + 3][j] = arr4[i][j];
			sudoku[i + 3][j + 3] = arr5[i][j];
			sudoku[i + 3][j + 6] = arr6[i][j];
			sudoku[i + 6][j] = arr7[i][j];
			sudoku[i + 6][j + 3] = arr8[i][j];
			sudoku[i + 6][j + 6] = arr9[i][j];

		}
	
			
}

void equating_matricies(int arr_i[3][3], int arr[3][3])
{
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			arr_i[i][j] = arr[i][j];
}

int random(int sudoku[9][9], int arr1[3][3], int arr2[3][3], int arr3[3][3], int arr4[3][3], int arr5[3][3], int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3])
{
	int i, j,sudoku_i[9][9],z=0;
	srand(time(0));
	
	do {
		for (i = 0; i < 9; i++)
		{
			for (j = 0; j < 9; j++)
			{
				sudoku[i][j] = (rand() % 9);
			}
		}


		sudoku_reverse(sudoku, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9);


		rand_modif(arr1, arr2, arr3, arr4, arr7); rand_modif(arr2, arr1, arr3, arr5, arr8); rand_modif(arr3, arr1, arr2, arr6, arr9);
		rand_modif(arr4, arr5, arr6, arr1, arr7); rand_modif(arr5, arr4, arr6, arr2, arr8); rand_modif(arr6, arr4, arr5, arr3, arr9);
		rand_modif(arr7, arr1, arr4, arr8, arr9); rand_modif(arr8, arr7, arr9, arr2, arr5); rand_modif(arr9, arr7, arr8, arr3, arr6);
		rand_modif_box(arr1); rand_modif_box(arr2); rand_modif_box(arr3); rand_modif_box(arr4); rand_modif_box(arr5); rand_modif_box(arr6);
		rand_modif_box(arr7); rand_modif_box(arr8); rand_modif_box(arr9);


		sudoku_init(sudoku, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9);

		for (i = 0; i < 9; i++)
			for (j = 0; j < 9; j++)
				sudoku_i[i][j] = sudoku[i][j];


		if (solve_sudoku(sudoku_i))
		{
			z = 1;
		}
	} while (z != 1);





	return 0;
}

void init_step_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3], int* check)
{
	int i, j, k, m;
	*check = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; (m < 3) && (arr[i][j] != 0); m++)
				{
					if (i != k || j != m)
					{
						if (arr[i][j] == arr[k][m])
						{

							(*check)++;
							printf("\033[1;31m");
							printf("\n%d is an invalid input in (%d,%d)\n", arr[k][m], k + 1, m + 1);
							arr[k][m] = 0;
							printf("\033[0m");
							break;
						}
					}
					if (arr[i][j] == arr1[i][m])
					{
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arr1[i][m], i + 1, m + 1);
						arr[i][j] = 0;
						printf("\033[0m");
						break;
					}
					if (arr[i][j] == arr2[i][m])
					{

						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arr2[i][m], i + 1, m + 1);
						arr[i][j] = 0;
						printf("\033[0m");
						break;
					}
					if (arr[j][i] == arc1[m][i] && arr[j][i] != 0)
					{
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arc1[m][i], m + 1, i + 1);
						arr[i][j] = 0;
						printf("\033[0m");
						break;
					}
					if (arr[j][i] == arc2[m][i] && arr[j][i] != 0)
					{
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arc2[m][i], m + 1, i + 1);
						arr[i][j] = 0;
						printf("\033[0m");
						break;
					}
				}
				if (*check > 0)
					break;
			}
			if (*check > 0)
				break;
		}
		if (*check > 0)
			break;
	}

}

void init(int puzzle[3][3], int arr1[3][3], int arr2[3][3], int arr3[3][3], int arr4[3][3], int arr5[3][3], int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3],int *choice_init)
{
	int i, r, c,N,check=0;
	printf("\033[1;36m");
	scanf("%d", &N);
	printf("\033[0m");
	for (i = 1; i <= N; i++)
	{
		printf("\n\033[1;35mEnter the row and column of the element you would like to enter(numbers between 1 and 3):\n\033[0m");
		printf("\033[1;36m");
		scanf("%d%d", &r, &c);
		printf("\033[0m");
		if (r <= 3 && c <= 3)
		{
			printf("\033[1;35mEnter the element (%d,%d)\n\033[0m", r, c);
			printf("\033[1;36m");
			scanf("%d", &puzzle[r - 1][c - 1]);
			switch (*choice_init)
			{
			case 1:
				init_step_checker(arr1, arr2, arr3, arr4, arr7, &check);
				break;
			case 2:
				init_step_checker(arr2, arr1, arr3, arr5, arr8, &check);
				break;
			case 3:
				init_step_checker(arr3, arr1, arr2, arr6, arr9, &check);
				break;
			case 4:
				init_step_checker(arr4, arr5, arr6, arr1, arr7, &check);
				break;
			case 5:
				init_step_checker(arr5, arr4, arr6, arr2, arr8, &check);
				break;
			case 6:
				init_step_checker(arr6, arr4, arr5, arr3, arr9, &check);
				break;
			case 7:
				init_step_checker(arr7, arr8, arr9, arr1, arr4, &check);
				break;
			case 8:
				init_step_checker(arr8, arr7, arr9, arr2, arr5, &check);
				break;
			case 9:
				init_step_checker(arr9, arr7, arr8, arr3, arr6, &check);
				break;
			default:
				break;

			}
			if (check==0)
			{
				printf("\033[0m");
				system("cls");
				printf("\nThe puzzle so far... :\n");
				printf("\033[1;36m");
				printf("\t  1 2 3   1 2 3   1 2 3\n");
				print_init_puzzle(arr1, arr2, arr3); print_init_puzzle(arr4, arr5, arr6); print_init_puzzle(arr7, arr8, arr9);
				printf("\t-------------------------");
				printf("\033[0m");
			}
			else
			{
				system("cls");
				printf("\n\033[1;31mIllegal input,please revise the puzzle and try again.\033[0m\n");
				printf("\nThe puzzle so far... :\n");
				printf("\033[1;36m");
				printf("\t  1 2 3   1 2 3   1 2 3\n");
				print_init_puzzle(arr1, arr2, arr3); print_init_puzzle(arr4, arr5, arr6); print_init_puzzle(arr7, arr8, arr9);
				printf("\t-------------------------");
				printf("\033[0m");
			}
		}
		else
		{
			system("cls");
			printf("\n\033[1;31mIncorrect input,please enter numbers between 1 and 3.\n\033[0m");
			printf("\nThe puzzle so far... :\n");
			printf("\033[1;36m");
			printf("\t  1 2 3   1 2 3   1 2 3\n");
			print_init_puzzle(arr1, arr2, arr3); print_init_puzzle(arr4, arr5, arr6); print_init_puzzle(arr7, arr8, arr9);
			printf("\t-------------------------");
			printf("\033[0m");
		}
	}
}

void print_puzzle(int printable1[3][3],int printable2[3][3],int printable3[3][3],int intial1[3][3],int intial2[3][3],int intial3[3][3])
{
	int r, c,counter=0;
	for (r = 0; r < 3; r++)
	{
		
		if (counter==0)
		{
			printf("\t\033[1;36m");
			printf("-------------------------");
			printf("\n\033[0m");
		}
		printf("\033[1;36m       %d: \033[0m", r + 1);
		
		for (c = 0; c < 3; c++)
			if (printable1[r][c] > 0)
			{
				if (printable1[r][c] != intial1[r][c])
				{
					printf("\033[01;33m"); 		
					printf("%d ", printable1[r][c]);
					printf("\033[0m"); 
				}
				else
					printf("\033[1;36m%d \033[0m", printable1[r][c]);
			}
			else
				printf("\033[1;36m. \033[0m");
		printf("\033[1;36m: \033[0m");
		
		for (c = 0; c < 3; c++)
			if (printable2[r][c] > 0)
			{
				if (printable2[r][c] != intial2[r][c])
				{
					printf("\033[01;33m");
					printf("%d ", printable2[r][c]);
					printf("\033[0m");
				}
				else
					printf("\033[1;36m%d \033[0m", printable2[r][c]);
			}
			else
				printf("\033[1;36m. \033[0m");
		printf("\033[1;36m: \033[0m");
		
		for (c = 0; c < 3; c++)
			if (printable3[r][c] > 0)
			{
				if (printable3[r][c] != intial3[r][c])
				{
					printf("\033[01;33m");
					printf("%d ", printable3[r][c]);
					printf("\033[0m");
				}
				else
					printf("\033[1;36m%d \033[0m", printable3[r][c]);
			}
			else
				printf("\033[1;36m. \033[0m");
		printf("\033[1;36m: \033[0m");
		printf("\n");
		counter++;		
	}

}

void play(int arr1[3][3], int arr2[3][3],int arr3[3][3],int arr4[3][3],int arr5[3][3],int arr6[3][3], int arr7[3][3], int arr8[3][3], int arr9[3][3]
, int arr1_i[3][3], int arr2_i[3][3], int arr3_i[3][3], int arr4_i[3][3], int arr5_i[3][3], int arr6_i[3][3], int arr7_i[3][3], int arr8_i[3][3], int arr9_i[3][3],int *time_check)

{
	int choice,turns=1;
	int time;

	*time_check = 0;
	clock_t start, end;
	start = clock();

	while (turns != 0)
	{


		printf("\033[1;35m\nPlease choose which 3x3 box you'd like to enter a number in(1-9):\033[0m");
		printf("\033[1;36m");
		scanf("%d", &choice);
		printf("\033[0m");
		int check = 0;
		switch (choice)
		{
		case 1:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #1:\n\033[0m");
			play_input(arr1,arr1_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr1, arr2, arr3, arr4, arr7, &check);
			break;
		case 2:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #2:\n\033[0m");
			play_input(arr2,arr2_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr2, arr1, arr3, arr5, arr8, &check);
			break;
		case 3:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #3:\n\033[0m");
			play_input(arr3,arr3_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr3, arr1, arr2, arr6, arr9, &check);
			break;
		case 4:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #4:\n\033[0m");
			play_input(arr4,arr4_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr4, arr5, arr6, arr1, arr7, &check);
			break;
		case 5:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #5:\n\033[0m");
			play_input(arr5,arr5_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr5, arr4, arr6, arr2, arr8, &check);
			break;
		case 6:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #6:\n\033[0m");
			play_input(arr6,arr6_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr6, arr4, arr5, arr3, arr9, &check);
			break;
		case 7:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #7:\n\033[0m");
			play_input(arr7,arr7_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr7, arr8, arr9, arr1, arr4, &check);
			break;
		case 8:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #8:\n\033[0m");
			play_input(arr8,arr8_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr8, arr7, arr9, arr2, arr5, &check);
			break;
		case 9:
			printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #9:\n\033[0m");
			play_input(arr9,arr9_i, arr1, arr2, arr3, arr4, arr5, arr6, arr7, arr8, arr9, arr1_i, arr2_i, arr3_i, arr4_i, arr5_i, arr6_i, arr7_i, arr8_i, arr9_i);
			step_checker(arr9, arr7, arr8, arr3, arr6, &check);
			break;
		default:
			printf("\033[01;33m");
			printf("\nIncorrect input,please try again.");
			printf("\033[0m");
			break;
		}
		end = clock();
		time = (end - start) / CLOCKS_PER_SEC;
		if (time > 180)
		{
			(*time_check)++;
			break;
		}
		else
			printf("\n\n\033[1;36mYou have (0%d:%02d) time left to finish the puzzle!\033[0m\n\n",2-(time/60),60-(time/3-time/60));
		
		printf("\n\033[1;35mDo you want to enter another number? enter 1 to continue or 0 to stop playing.\n\033[0m");
		printf("\033[1;36m");
		scanf("%d", &turns);
		printf("\033[0m");
	} 
}

void final_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3],int *check)
{
	int i, j, k, m;
	*check = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0;j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; m < 3; m++)
				{
					if (arr[i][j] == arr[k][m])
					{
						if (i != k || j != m)
						{
							(*check)++;
							break;
						}
					}
					if (arr[i][j] == arr1[i][m])
					{
						
						(*check)++;
						break;
					}
					if (arr[i][j] == arr2[i][m])
					{
						
						(*check)++;
						break;
					}
					if (arr[j][i] == arc1[m][i])
					{
						(*check)++;
						break;
					}
					if (arr[j][i] == arc2[m][i])
					{
						
						(*check)++;
						break;
					}
				}
			}
		}
	}
	
}

void rand_modif(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3])
{
	int i, j, k, m;
	
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; m < 3; m++)
				{
					if (arr[i][j] == arr[k][m])
					{
						if (i != k || j != m)
						{
							arr[k][m] = 0;
							
						}
					}
					if (arr[i][j] == arr1[i][m])
					{

						arr1[i][m] = 0;
					}
					if (arr[i][j] == arr2[i][m])
					{

						arr2[i][m] = 0;
					}
					if (arr[j][i] == arc1[m][i])
					{
						arc1[m][i] = 0;
					}
					if (arr[j][i] == arc2[m][i])
					{

						arc2[m][i] = 0;
					}
				}
			}
		}
	}

}

void step_checker(int arr[3][3], int arr1[3][3], int arr2[3][3], int arc1[3][3], int arc2[3][3], int* check)
{
	int i, j, k, m;
	*check = 0;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			for (k = 0; k < 3; k++)
			{
				for (m = 0; (m < 3) && (arr[i][j]!=0) ;m++)
				{
					if (i != k || j != m)
					{
						if (arr[i][j]==arr[k][m])
						{
							
							(*check)++;
							printf("\033[1;31m");
							printf("\n%d is an invalid input in (%d,%d)\n", arr[k][m], k+1, m+1);
							printf("\033[0m");
							break;
						}
					}
					if (arr[i][j] == arr1[i][m])
					{
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arr1[i][m], i+1, m+1);
						printf("\033[0m");
						break;
					}
					if (arr[i][j] == arr2[i][m])
					{
						
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arr2[i][m], i + 1, m + 1);
						printf("\033[0m");
						break;
					}
					if (arr[j][i] == arc1[m][i]&& arr[j][i]!=0)
					{	
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arc1[m][i],m+1,i+1);
						printf("\033[0m");
						break;
					}
					if (arr[j][i] == arc2[m][i] && arr[j][i] != 0)
					{
						(*check)++;
						printf("\033[1;31m");
						printf("\n%d is an invalid input in (%d,%d)\n", arc2[m][i], m + 1, i + 1);
						printf("\033[0m");
						break;
					}
				}
				if (*check > 0)
					break;
			}
			if (*check > 0)
				break;
		}
		if (*check > 0)
			break;
	}

}

int number_unassigned(int sudoku[9][9],int* row, int* col)
{
	int num_unassign = 0;
	int i, j;
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 9; j++)
		{
			if (sudoku[i][j] == 0)
			{
				*row = i;
				*col = j;
				num_unassign = 1;
				return num_unassign;
			}
		}
	}
	return num_unassign;
}

int is_safe(int sudoku[9][9],int n, int r, int c)
{
	int i, j;
	for (i = 0; i < 9; i++)
	{
		if (sudoku[r][i] == n)
			return 0;
	}
	for (i = 0; i < 9; i++)
	{
		if (sudoku[i][c] == n)
			return 0;
	}
	int row_start = (r / 3) * 3;
	int col_start = (c / 3) * 3;
	for (i = row_start; i < row_start + 3; i++)
	{
		for (j = col_start; j < col_start + 3; j++)
		{
			if (sudoku[i][j] == n)
				return 0;
		}
	}
	return 1;
}

int solve_sudoku(int sudoku[9][9])
{
	int row;
	int col;
	int i;
	
	if (number_unassigned(sudoku,&row, &col) == 0)
		return 1;
	
	for (i = 1; i <= 9; i++)
	{
		if (is_safe(sudoku,i, row, col))
		{
			sudoku[row][col] = i;
			if (solve_sudoku(sudoku))
				return 1;
			sudoku[row][col] = 0;
		}
	}
	return 0;
}




int main()
{
	int choice;
	int box1[3][3] ,box2[3][3] ,box3[3][3],box4[3][3],box5[3][3],box6[3][3],box7[3][3],box8[3][3],box9[3][3];
	int box1_i[3][3], box2_i[3][3], box3_i[3][3], box4_i[3][3], box5_i[3][3], box6_i[3][3], box7_i[3][3], box8_i[3][3], box9_i[3][3];
	equating_zero(box1); equating_zero(box2); equating_zero(box3);
	equating_zero(box4); equating_zero(box5); equating_zero(box6);
	equating_zero(box7); equating_zero(box8); equating_zero(box9);
	equating_matricies(box1_i, box1);  equating_matricies(box2_i, box2); equating_matricies(box3_i, box3);
	equating_matricies(box4_i, box4); equating_matricies(box5_i, box5); equating_matricies(box6_i, box6);
	equating_matricies(box7_i, box7); equating_matricies(box8_i, box8); equating_matricies(box9_i, box9);
	int c1=0, c2=0, c3=0, c4=0, c5=0, c6=0, c7=0, c8=0, c9=0;
	int sudoku[9][9];
	int solve_check=0;
	int turns = 1, choice_init;
	int time_check;
	printf("\033[1;35m");
	printf("Welcome to the sudoku puzzle game");
	printf("\nThis program allows you to make a sudoku puzzle AND have someone else solve it!");
	printf("\nIt can also automatically solve your puzzle for you if it gets too hard!");
	printf("\033[0m");
	do 
	{
		printf("\033[1;35m");
		printf("\nPlease choose one of the following options:");
		printf("\n1-I want to make a puzzle manually");
		printf("\n2-Make a puzzle for me");
		printf("\n3-Start playing");
		printf("\n4-Reset the puzzle to its intial state");
		printf("\n5-Solve the puzzle for me");
		printf("\n6-Check my final solution");
		printf("\n7-Reset everything and start a new game");
		printf("\n8-Quit the game\n\033[0m");
		printf("\033[1;36m");
		scanf("%d", &choice);
		printf("\033[0m");
		switch (choice)
		{
		
		case 1:
		
		{
			
			printf("\n\033[1;35mThis is the intial stage of the puzzle\nEnter a number between 1 and 9 in each box.\n\033[0m");
			
			
			do {
				printf("\n\033[1;35mPlease choose which 3x3 box you'd like to enter a number in(1-9):\033[0m");
				printf("\033[1;36m");
				scanf("%d", &choice_init);
				printf("\033[0m");
				switch (choice_init)
				{
				case 1:
					printf("\033[1;35m\nPlease enter the amount of elements you would like to enter in grid #1:\n\033[0m");
					init(box1, box1, box2, box3, box4, box5, box6, box7, box8, box9,&choice_init);
					break;
				case 2:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #2:\n\033[0m");
					init(box2, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 3:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #3:\n\033[0m");
					init(box3, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 4:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #4:\n\033[0m");
					init(box4, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 5:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #5:\n\033[0m");
					init(box5, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 6:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #6:\n\033[0m");
					init(box6, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 7:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #7:\n\033[0m");
					init(box7, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 8:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #8:\n\033[0m");
					init(box8, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				case 9:
					printf("\n\033[1;35mPlease enter the amount of elements you would like to enter in grid #9:\n\033[0m");
					init(box9, box1, box2, box3, box4, box5, box6, box7, box8, box9, &choice_init);
					break;
				default:
					printf("\n\033[1;31mIncorrect input,please try again.\033[0m");
					break;
				}

				printf("\n\n\033[1;35mDo you want to enter another number? enter 0 to stop making the puzzle or enter any other number to continue playing\n\033[0m");
				printf("\033[1;36m");
				scanf("%d", &turns);
				printf("\033[0m");
			} while (turns != 0);
			
			equating_matricies(box1_i, box1);  equating_matricies(box2_i, box2); equating_matricies(box3_i, box3);
			equating_matricies(box4_i, box4); equating_matricies(box5_i, box5); equating_matricies(box6_i, box6);
			equating_matricies(box7_i, box7); equating_matricies(box8_i, box8); equating_matricies(box9_i, box9);
			system("cls");
			printf("\nThe entered puzzle is:\n");
			printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
			print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
			printf("\t\033[1;36m-------------------------\033[0m");
			break;
		}

		case 2:

		{
		
		random(sudoku,box1,box2,box3,box4,box5,box6,box7,box8,box9);
		equating_matricies(box1_i, box1);  equating_matricies(box2_i, box2); equating_matricies(box3_i, box3);
		equating_matricies(box4_i, box4); equating_matricies(box5_i, box5); equating_matricies(box6_i, box6);
		equating_matricies(box7_i, box7); equating_matricies(box8_i, box8); equating_matricies(box9_i, box9);
		system("cls");
		printf("\nThe random puzzle is... :\n");
		printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
		print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
		printf("\t\033[1;36m-------------------------\033[0m");

		break;
		}

		case 3:
		
		{
		
		printf("\n\033[1;35mYou can now start playing the game,good luck!");
		printf("\nYou have 3 minutes to complete the puzzle\nGood luck!");
		printf("\nPlease keep in mind that this sudoku puzzle is divided into 9 matricies of order 3x3.\033[0m");
		play(box1, box2, box3, box4, box5, box6, box7, box8, box9,box1_i,box2_i,box3_i,box4_i,box5_i,box6_i,box7_i,box8_i,box9_i,&time_check);
		system("cls");
		if (time_check == 1)
		{
			printf("\n\033[1;31mSorry,time is up!\nBetter luck next time!\033[0m");
			
		}
		printf("\nThe puzzle so far... :\n");
		printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
		print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
		printf("\t\033[1;36m-------------------------\033[0m");
		break;
		}

		case 4:
		{
		system("cls");
		equating_matricies(box1, box1_i);  equating_matricies(box2, box2_i); equating_matricies(box3, box3_i);
		equating_matricies(box4, box4_i); equating_matricies(box5, box5_i); equating_matricies(box6, box6_i);
		equating_matricies(box7, box7_i); equating_matricies(box8, box8_i); equating_matricies(box9, box9_i);
		printf("\nResetting puzzle...");
		printf("\nThe entered puzzle is:\n");
		printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n");
		print_init_puzzle(box1_i, box2_i, box3_i); print_init_puzzle(box4_i, box5_i, box6_i); print_init_puzzle(box7_i, box8_i, box9_i);
		printf("\t-------------------------\033[0m");
		break; 
		}

		case 5:
		
		{
			system("cls");
			sudoku_init(sudoku, box1_i, box2_i, box3_i, box4_i, box5_i, box6_i, box7_i, box8_i, box9_i);
			solve_sudoku(sudoku);
			if (solve_sudoku(sudoku))
				solve_check = 1;
			if (solve_check == 1)
			{
				sudoku_reverse(sudoku, box1, box2, box3, box4, box5, box6, box7, box8, box9);
				system("cls");
				printf("\nThe final solution is... :\n");
				printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
				print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
				printf("\t\033[1;36m-------------------------\033[0m");

			}
			else
			{
				sudoku_reverse(sudoku, box1, box2, box3, box4, box5, box6, box7, box8, box9);
				system("cls");
				printf("\n\033[1;31mThe entered puzzle doesn't have a solution,change the puzzle and try again.\n\033[0m");
				printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
				print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
				printf("\t\033[1;36m-------------------------\033[0m");
				
				
			}
			break;
		}

		case 6:
	
		{	
			
		system("cls");
		printf("\nChecking your final solution...");
		
		final_checker(box1, box2, box3, box4, box7, &c1); final_checker(box2, box1, box3, box5, box8, &c2);
		final_checker(box3, box1, box2, box6, box9, &c3); final_checker(box4, box5, box6, box1, box7, &c4);
		final_checker(box5, box4, box6, box2, box8, &c5); final_checker(box6, box4, box5, box3, box9, &c6);
		final_checker(box7, box8, box9, box1, box4, &c7); final_checker(box8, box7, box9, box2, box5, &c8);
		final_checker(box9, box7, box8, box3, box6, &c9);
		if (c1 != 0 || c2 != 0 || c3 != 0 || c4 != 0 || c5 != 0 || c6 != 0 || c7 != 0 || c8 != 0 || c9 != 0)
			printf("\033[1;31m\n\nThe solution is incorrect,please try again\n\n\033[0m");
		if (c1 == 0 && c2 == 0 && c3 == 0 && c4 == 0 && c5 == 0 && c6 == 0 && c7 == 0 && c8 == 0 && c9 == 0)
			printf("\033[1;36m\n\nCongratulations! Your solution is correct!\n\n\033[0m");
		
		printf("\t\033[1;36m  1 2 3   1 2 3   1 2 3\n\033[0m");
		print_puzzle(box1, box2, box3, box1_i, box2_i, box3_i); print_puzzle(box4, box5, box6, box4_i, box5_i, box6_i); print_puzzle(box7, box8, box9, box7_i, box8_i, box9_i);
		printf("\t\033[1;36m-------------------------\033[0m");
		break;
		}

		case 7:

		{
		equating_zero(box1); equating_zero(box2); equating_zero(box3);
		equating_zero(box4); equating_zero(box5); equating_zero(box6);
		equating_zero(box7); equating_zero(box8); equating_zero(box9);

		equating_matricies(box1_i, box1);  equating_matricies(box2_i, box2); equating_matricies(box3_i, box3);
		equating_matricies(box4_i, box4); equating_matricies(box5_i, box5); equating_matricies(box6_i, box6);
		equating_matricies(box7_i, box7); equating_matricies(box8_i, box8); equating_matricies(box9_i, box9);
		system("cls");
		break;
		}

		default:

		{	
			if (choice == 8)
				printf("\n\n\033[1;35mThanks for playing!\033[0m\n\n");
			else
			{
			printf("\n\033[1;31mIncorrect input,Enter 0 to exit or 1 to rerun the program:\n\033[0m");
			printf("\033[1;36m");
			scanf("%d", &choice);
			printf("\033[0m");
			}
		
			break;
		}

		}
	} while (choice>=1 && choice <=7);
	return 0;
}



